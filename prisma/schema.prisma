generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ServiceType {
  OneTimeFeeService
  HourlyRateService
}

enum Status {
  PENDING
  INPROGRESS
  CANCELLED
  COMPELETED
}

enum ServiceList {
  healthcareServices
  carpetCleaning
  hairCut
  electricalWiring
  gasPiping
  applianceRepair
  pipeFitting
  HeatingSystemInstallation
  CleaningService
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  name          String
  lastName      String
  password      String
  NIDN          Int
  phoneNumber   String
  image         String?
  uniqueImageId String?
  isLoggedIn    Boolean   @default(false)
  isAdmin       Boolean   @default(false)
  isModerator   Boolean   @default(false)
  isBan         Boolean   @default(false)
  customerId    Int?
  customer      Customer?
  providerId    Int?
  provider      Provider?

  createdAt DateTime  @default(now())
  updatedAt DateTime?
}

model Customer {
  id               Int       @id @default(autoincrement())
  customerBookings Booking[] @relation("CustomerBookings")
  customerReviews  Review[]  @relation("CustomerReviews")
  Report           Report[]
  user             User      @relation(fields: [userId], references: [id])
  userId           Int       @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime?
}

model Provider {
  id               Int            @id @default(autoincrement())
  location         String
  services         Service[]
  providerBookings Booking[]      @relation("ProviderBookings")
  providerReviews  Review[]       @relation("ProviderReviews")
  availabilities   Availability[]
  Report           Report[]
  userId           Int            @unique
  user             User           @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime?
}

model Service {
  id            Int            @id @default(autoincrement())
  name          String
  title         ServiceList
  serviceType   ServiceType
  Rating        Float?
  description   String
  image         String?
  uniqueImageId String?
  price         Float
  providerId    Int
  location      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?
  provider      Provider       @relation(fields: [providerId], references: [id], onDelete: Cascade)
  bookings      Booking[]
  availability  Availability[]
}

model Booking {
  id          Int       @id @default(autoincrement())
  status      Status    @default(PENDING)
  customerId  Int
  providerId  Int
  serviceId   Int
  totalfee    Decimal
  bookingDate DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  customer    Customer  @relation(name: "CustomerBookings", fields: [customerId], references: [id])
  provider    Provider  @relation(name: "ProviderBookings", fields: [providerId], references: [id])
  service     Service   @relation(fields: [serviceId], references: [id])
  review      Review?
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int
  comment    String?
  customerId Int
  providerId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(name: "CustomerReviews", fields: [customerId], references: [id])
  provider   Provider @relation(name: "ProviderReviews", fields: [providerId], references: [id])
  bookId     Int      @unique
  book       Booking  @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model Availability {
  id         Int      @id @default(autoincrement())
  providerId Int
  serviceId  Int
  dayOfWeek  Int
  startTime  Int
  endTime    Int
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id          Int       @id @default(autoincrement())
  providerId  Int?      @unique
  customerId  Int?      @unique
  title       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  provider    Provider? @relation(fields: [providerId], references: [id])
  customer    Customer? @relation(fields: [customerId], references: [id])
}
